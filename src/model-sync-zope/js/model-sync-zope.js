/**
Extension to provide remote communication from Model and ModelList to Zope servers.

This module is a modified version of ModelSync.REST.

@module model
@submodule model-sync-zope
*/
/**
Extension to provide remote communication from Model and ModelList to Zope servers
@class ModelSync.Zope
*/

var ZopeSync = function () {};

/**
 Default headers used with all XHRs.

 By default the `Accept` and `Content-Type` headers are set to
 "application/json", this signals to the HTTP server to process the request
 bodies as JSON and send JSON responses. If you're sending and receiving content
 other than JSON, you can override these headers and the `parse()` and
 `serialize()` methods.

 **Note:** These headers will be merged with any request-specific headers, and
 the request-specific headers will take precedence.

 @property HTTP_HEADERS
 @type Object
 @default
 {
 "Accept"      : "application/json",
 "Content-Type": "application/json"
 }
 @static
 @since 3.6.0
 **/
ZopeSync.HTTP_HEADERS = {
    'Accept'      : 'application/json',
    'Content-Type': 'application/json'
};

/**
 The number of milliseconds before the XHRs will timeout/abort. This defaults to
 30 seconds.

 **Note:** This can be overridden on a per-request basis. See `sync()` method.

 @property HTTP_TIMEOUT
 @type Number
 @default 30000
 @static
 @since 3.6.0
 **/
ZopeSync.HTTP_TIMEOUT = 30000;

/**
 Properties that shouldn't be turned into ad-hoc attributes when passed to a
 Model or ModelList constructor.

 @property _NON_ATTRS_CFG
 @type Array
 @default ["root", "url"]
 @static
 @protected
 @since 3.6.0
 **/
ZopeSync._NON_ATTRS_CFG = ['root'];

ZopeSync.prototype = {

    // -- Public Properties ----------------------------------------------------

    /**
     A string which represents the root or collection part of the URL which
     relates to a Model or ModelList. Usually this value should be same for all
     instances of a specific Model/ModelList subclass.

     When sub-classing `Y.Model`, usually you'll only need to override this
     property, which lets the URLs for the XHRs be generated by convention. If
     the `root` string ends with a trailing-slash, XHR URLs will also end with a
     "/", and if the `root` does not end with a slash, neither will the XHR URLs.

         Y.User = Y.Base.create('user', Y.Model, [Y.ModelSync.Zope], {
            root: '/users'
         });

         var currentUser, newUser;

         // GET the user data from: "/users/123"
         currentUser = new Y.User({id: '123'}).load();

         // POST the new user data to: "/users"
         newUser = new Y.User({name: 'Eric Ferraiuolo'}).save();

     When sub-classing `Y.ModelList`, usually you'll want to ignore configuring
     the `root` and simply rely on the build-in convention of the list's
     generated URLs defaulting to the `root` specified by the list's `model`.

     @property root
     @type String
     @default ""
     @since 3.6.0
     **/
    root: '',


    // -- Lifecycle Methods ----------------------------------------------------

    initializer: function (config) {
        config = config || {};

        // Overrides `root` at the instance level.
        if ('root' in config) {
            this.root = config.root || '';
        }

    },

    // -- Public Methods -------------------------------------------------------


    /**
     Serializes `this` model to be used as the HTTP request body body.

     By default this model will be serialized to a JSON string via its `toJSON()`
     method.

     You can override this method when the HTTP server expects a different
     representation of this model's data that is different from the default JSON
     serialization. If you're sending and receive content other than JSON, be
     sure change the `Accept` and `Content-Type` `HTTP_HEADERS` as well.

     **Note:** A model's `toJSON()` method can also be overridden. If you only
     need to modify which attributes are serialized to JSON, that's a better
     place to start.

     @method serialize
     @return {String} serialized HTTP request body body.
     @since 3.6.0
     **/
    serialize: function () {
        return Y.JSON.stringify(this);
    },

    /**
     Communicates with a RESTful HTTP server by sending and receiving data via
     XHRs. This method is called internally by load(), save(), and destroy().


     @method sync
     @param {String} action Sync action to perform. May be one of the following:

     * `create`: Store a newly-created model for the first time.
     * `delete`: Delete an existing model.
     * `read`  : Load an existing model.
     * `update`: Update an existing model.

     @param {Object} [options] Sync options:
     @param {Object} [options.headers] The HTTP headers to mix with the default
     headers specified by the static `HTTP_HEADERS` property.
     @param {Number} [options.timeout] The number of milliseconds before the
     request will timeout and be aborted. This overrides the default provided
     by the static `HTTP_TIMEOUT` property.
     @param {Function} [callback] Called when the sync operation finishes.
     @param {Error|null} callback.err If an error occurred, this parameter will
     contain the error. If the sync operation succeeded, _err_ will be
     falsy.
     @param {Any} [callback.response] The server's response.
     **/
    sync: function (action, options, callback) {
        options = options || {};

        var url       = this.root,
            urlArgs,
            method,
            body;

        options.action = action;

        switch (action) {
        case 'create':
            body = this.serialize();
            method = 'POST';
            break;
        case 'update':
            options.id = this.get('id');
            body = this.serialize();
            method = 'POST';
            break;
        case 'read':
            if (!this._isYUIModelList) {
                options.id = this.get('id');
            }
            method = 'GET';
            break;
        case 'delete':
            options.id = this.get('id');
            method = 'GET';
            break;
        }
        urlArgs = [];
        Y.Object.each(options, function (value, key) {
            urlArgs.push(key + '=' + encodeURIComponent(value));
        });

        urlArgs = urlArgs.join('&');
        url += '?' + urlArgs;

        Y.io(url, {
            method: method,
            data: body,
            'arguments': {
               action: action,
               callback: callback,
               url: url
            },
            context: this,
            headers: Y.merge(ZopeSync.HTTP_HEADERS, options.headers),
            timeout: options.timeout || ZopeSync.HTTP_TIMEOUT,
            on: {
                start  : this._onSyncIOStart,
                failure: this._onSyncIOFailure,
                success: this._onSyncIOSuccess,
                end    : this._onSyncIOEnd
            }
        });
    },


    // -- Event Handlers -------------------------------------------------------

    /**
     Called when the `Y.io` request has finished, after "success" or "failure"
     has been determined.

     This is a no-op by default, but provides a hook for overriding.

     @method _onSyncIOEnd
     @param {String} txId The `Y.io` transaction id.
     @param {Object} details Extra details carried through from `sync()`:
     @param {String} details.action The sync action performed.
     @param {Function} [details.callback] The function to call after syncing.
     @param {String} details.url The URL of the requested resource.
     @protected
     @since 3.6.0
     **/
    _onSyncIOEnd: function (/* txId, details */ ) {},

    /**
     Called when the `Y.io` request has finished unsuccessfully.

     By default this calls the `details.callback` function passing it the HTTP
     status code and message as an error object along with the response body.

     @method _onSyncIOFailure
     @param {String} txId The `Y.io` transaction id.
     @param {Object} res The `Y.io` response object.
     @param {Object} details Extra details carried through from `sync()`:
     @param {String} details.action The sync action performed.
     @param {Function} [details.callback] The function to call after syncing.
     @param {String} details.url The URL of the requested resource.
     @protected
     @since 3.6.0
     **/
    _onSyncIOFailure: function (txId, res, details) {
        var callback = details.callback;

        if (callback) {
            callback({
                code: res.status,
                msg : res.statusText
            }, res);
        }
    },

    /**
     Called when the `Y.io` request has finished successfully.

     By default this calls the `details.callback` function passing it the
     response body.

     @method _onSyncIOSuccess
     @param {String} txId The `Y.io` transaction id.
     @param {Object} res The `Y.io` response object.
     @param {Object} details Extra details carried through from `sync()`:
     @param {String} details.action The sync action performed.
     @param {Function} [details.callback] The function to call after syncing.
     @param {String} details.url The URL of the requested resource.
     @protected
     @since 3.6.0
     **/
    _onSyncIOSuccess: function (txId, res, details) {
        var callback = details.callback;

        if (callback) {
            callback(null, res);
        }
    },

    /**
     Called when the `Y.io` request is made.

     This is a no-op by default, but provides a hook for overriding.

     @method _onSyncIOStart
     @param {String} txId The `Y.io` transaction id.
     @param {Object} details Extra details carried through from `sync()`:
     @param {String} details.action The sync action performed.
     @param {Function} [details.callback] The function to call after syncing.
     @param {String} details.url The URL of the requested resource.
     @protected
     @since 3.6.0
     **/
    _onSyncIOStart: function (/* txId, details */) {}
};

// -- Namespace ----------------------------------------------------------------

Y.namespace('ModelSync').Zope = ZopeSync;